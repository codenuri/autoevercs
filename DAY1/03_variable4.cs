// 배열 
// => 동일 타입의 값 여러개를 한개의 변수로 관리하고 싶을때 사용

// C언어
/*
int n1 = 10;    // 정수값 "한개" 만 보관

int x[5] = { 1, 2, 3, 4, 5 };
x[0] = 10;
x[1] = 20;
*/




// #1. C# 배열 선언과 초기화
// => 아래 x1 ~ x5 는 모두 동일
// => x1 방법 사용
// => "new" 를 제대로 알게 되면 "나머지도 쉬워집니다."- 내일 등장

int[] x1 = { 1, 2, 3, 4, 5, 6}; // 권장하는 코드

int[] x2 = new int[]{ 1, 2, 3, 4, 5, 6};
int[] x3 = new []{ 1, 2, 3, 4, 5, 6};
var   x4 = new []{ 1, 2, 3, 4, 5, 6};
int[] x5 = [ 1, 2, 3, 4, 5, 6];  // C# 12.0


x1[0] = 0;
x1[1] = 10;

// 주의 5개 배열의 마지막 요소는 index 4입니다.
x1[4] = 10; // 마지막 요소
x1[5] = 10; // error. x1 는 5개 배열이므로 마지막은 x1[4]


// #2. 다차원 배열
int[, ] x6 = {{1, 2}, {3, 4}, {4, 5}};

x6[0, 0] = 10;


// 참고
// C/C++/C#/Java/Rust 등 대부분의 언어는 배열이 있습니다.
// => 특징 #1. 여러개 요소 보관이 가능한데
// => 특징 #2. 크기를 변경할수 없습니다.

int[] x = { 1, 2, 3 }; // x배열은 항상 크기가 3입니다. 변경불가능합니다.


// 배열은 크기를 변경할수 없어서, 다른 도구가 필요합니다.
// => C# List 는 크기 변경이 가능한 배열 입니다. - 4일차 
List<int> c = new List<int>();
c.Add(1);
c.Add(2);

// 일반적으로 대부분 언어에서는 2개의 개념 제공
// 배열 : 크기를 변경할수 없지만, 빠르다.
// List 또는 Vector : 크기를 변경할수 있지만, 느리다.

/*
// 파이썬 : list 만 제공
s = [1, 2, 3, 4] // 4개 크기 동적배열
s.append(5)      // 한개 추가, 즉, 크기 변경 가능
s[0] = 1;
*/