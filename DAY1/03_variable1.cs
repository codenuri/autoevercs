// #1. Data type ( 19 page 표 참고)
int    n = 0;   // int    : 정수 타입 4바이트
double d = 3.4; // double : 실수 타입 8바이트

bool   b = true; // true 또는 false 보관

char   c = 'A';         // char : 문자 한개 보관
string s = "hello";     // string : 문자열(문자 여러개) 보관

// 'A' 와 "A" 
// 파이썬    : 완전히 동일
// C/C++/C# 등 대부분의 언어 : 다름
//-------------------------------

// #1. 정수 타입과 문자 타입
// => "문자를 보관한다는 것은 해당 문자로 약속된 숫자" 를 보관하는 것
int  n1 = 'A';  // 65 보관
char c1 = 'A';  // 65 보관

// 그런데, n1, c1을 사용할때 컴파일러가 해당 데이타(65)를 어떻게 생각하는가?
// 가 타입에 따라 달라집니다
Console.WriteLine(n1);
Console.WriteLine(c1);


// #2. 문자와 문자열
char c2 = 'A'; // 메모리에 65 만 보관

string s1 = "ABCD"; // 65, 66, 67, 78 를 보관하고, 끝을 나타내는 것도 보관
                    // => 갯수를 보관하거나 - RUST, C#, Python
                    // => 문자열 끝에 0 보관 - C/C++

char c3 = 'A';    // 65만 보관
string s3 = "A";  // 65 와 갯수 보관

/*
// 파이썬 : 문자 타입이 없다.!! 모든 것은 문자열이다.
s1 = 'A'; // 문자열입니다. "65와 갯수 보관"
s2 = "A";     // 위와 동일
//s2 = '''A'''; // 위와 동일
*/


// #2. var
// => 우변의 초기값으로 타입을 추론해 달라.
var v1 = 10;		// int    v1 = 10;
var v2 = 3.4;		// double v2 = 3.4;
var v3 = "hello";	// string v3 = "hello";


// #3. literal(리터럴)
// => 프로그램에서 사용하는 "변수" 가 아닌 "값" 
// => 10, 3.4, 'A', "ABCD"
int a1 = 10;		 // 10진수
int a2 = 0x10;		 // 16진수
int a3 = 0b10;		 // 2진수

int a4 = 1000000;	// 리터럴값이 크다면
int a5 = 1_000_000; // 자리수 표기 가능 _ 사용
                    // => 정확한 의미는 정수 사이 _는 컴파일시 무시해 달라

int a6 = 1_0_0_0_00_0; // ok


